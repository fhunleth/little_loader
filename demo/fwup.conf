# Firmware configuration file

require-fwup-version="1.0.0"

#
# Firmware metadata
#

# This configuration file will create an image that
# has an MBR and the following layout:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | Firmware configuration data|
# | (formatted as uboot env)   |
# +----------------------------+
# | Image A                    |
# +----------------------------+
# | Image B                    |
# +----------------------------+
# | p0: Uninitialized fs       |
# +----------------------------+
#

# The U-Boot environment is written directly to the SDCard/eMMC. It is not
# in any partition. This uses the default U-Boot eMMC offset/count.
define(UBOOT_ENV_OFFSET, 16)
define(UBOOT_ENV_COUNT, 256)  # 128 KB

# The offsets MUST currently match hardcoded values in the bootloader!
define(IMAGE_A_OFFSET, 8192) # 0x2000
define(IMAGE_A_COUNT, 65536) # 64 MiB or 0x10000
define-eval(IMAGE_B_OFFSET, "${IMAGE_A_OFFSET} + ${IMAGE_A_COUNT}") # 0x12000
define(IMAGE_B_COUNT, ${IMAGE_A_COUNT})

# Unused application data partition
define-eval(APP_PART_OFFSET, "${IMAGE_B_OFFSET} + ${IMAGE_B_COUNT}")
define(APP_PART_COUNT, 1048576)

file-resource Image {
    host-path = "Image"
}

mbr mbr {
    partition 0 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
}

# Location where installed firmware information is stored.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media.
task complete {
    on-init {
        uboot_clearenv(uboot-env)
        uboot_setenv(uboot-env, "a.nerves_fw_uuid", "\${FWUP_META_UUID}")
        uboot_setenv(uboot-env, "a.offset", "${IMAGE_A_OFFSET}")
        uboot_setenv(uboot-env, "b.offset", "${IMAGE_B_OFFSET}")
    }

    on-resource Image { raw_write(${IMAGE_A_OFFSET}) }

    on-finish {
        mbr_write(mbr)
        raw_memset(${APP_PART_OFFSET}, 256, 0xff)
        raw_memset(${IMAGE_B_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")

    # Require that the running version of firmware has been validated.
    # If it has not, then failing back is not guaranteed to work.
    require-uboot-variable(uboot-env, "upgrade_available", "0")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.nerves_fw_uuid")
    }

    # Write the new firmware and Linux images, but don't
    # commit them. That way if the user aborts midway, we
    # still are using the original firmware.
    on-resource Image {
      raw_write(${IMAGE_A_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "a.nerves_fw_uuid", "\${FWUP_META_UUID}")

        # Reset the validation status and boot to A
        # next time.
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
        uboot_setenv(uboot-env, "nerves_fw_validated", "0")
        uboot_setenv(uboot-env, "upgrade_available", "1")
        uboot_setenv(uboot-env, "bootcount", "0")
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")
    require-uboot-variable(uboot-env, "upgrade_available", "0")

    on-init {
        info("Upgrading partition B")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "b.nerves_fw_uuid")
    }

    on-resource Image {
      raw_write(${IMAGE_B_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "b.nerves_fw_uuid", "\${FWUP_META_UUID}")

        # Reset the validation status and boot to B next time.
        uboot_setenv(uboot-env, "nerves_fw_active", "b")
        uboot_setenv(uboot-env, "nerves_fw_validated", "0")
        uboot_setenv(uboot-env, "upgrade_available", "1")
        uboot_setenv(uboot-env, "bootcount", "0")
    }

    on-error {
    }
}

task upgrade.unvalidated {
    require-uboot-variable(uboot-env, "upgrade_available", "1")

    on-init {
        error("Please validate the running firmware before upgrading it again.")
    }
}

task upgrade.error {
    on-init {
        error("Something went wrong")
    }
}